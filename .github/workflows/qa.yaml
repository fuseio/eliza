---
name: Build & Deploy to Kubernetes [QA]

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    name: Build & Push
    runs-on: ubuntu-latest
    environment: qa
    env:
      PRIVATE_REGISTRY_ENDPOINT: ${{ secrets.PRIVATE_REGISTRY_ENDPOINT }}
      PRIVATE_REGISTRY_REPOSITORY: ${{ secrets.PRIVATE_REGISTRY_REPOSITORY }}
      PRIVATE_REGISTRY_USERNAME: ${{ secrets.PRIVATE_REGISTRY_USERNAME }}
      PRIVATE_REGISTRY_PASSWORD: ${{ secrets.PRIVATE_REGISTRY_PASSWORD }}
    outputs:
      short_sha: ${{ steps.sha.outputs.short_sha }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set GitHub commit short SHA
        id: sha
        run: |
          CALCULATED_SHA=$(git rev-parse --short ${{ github.sha }})
          echo "short_sha=$CALCULATED_SHA" >> $GITHUB_OUTPUT

      - name: Login to private registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.PRIVATE_REGISTRY_ENDPOINT }}
          username: ${{ env.PRIVATE_REGISTRY_USERNAME }}
          password: ${{ env.PRIVATE_REGISTRY_PASSWORD }}
          logout: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image(s)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.PRIVATE_REGISTRY_ENDPOINT }}/${{ env.PRIVATE_REGISTRY_REPOSITORY }}:latest
            ${{ env.PRIVATE_REGISTRY_ENDPOINT }}/${{ env.PRIVATE_REGISTRY_REPOSITORY }}:${{ steps.sha.outputs.short_sha }}
          cache-from: type=gha,scope=${{ github.ref }}-eliza
          cache-to: type=gha,mode=max,scope=${{ github.ref }}-eliza

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: qa
    env:
      PRIVATE_REGISTRY_ENDPOINT: ${{ secrets.PRIVATE_REGISTRY_ENDPOINT }}
      PRIVATE_REGISTRY_REPOSITORY: ${{ secrets.PRIVATE_REGISTRY_REPOSITORY }}
      K8S_KUBECONFIG: ${{ secrets.K8S_KUBECONFIG }}
      HELM_CHART_REGISTRY_ENDPOINT: ${{ secrets.HELM_CHART_REGISTRY_ENDPOINT }}
      HELM_CHART_REGISTRY_REPOSITORY: ${{ secrets.HELM_CHART_REGISTRY_REPOSITORY }}
      HELM_CHART_REGISTRY_USERNAME: ${{ secrets.HELM_CHART_REGISTRY_USERNAME }}
      HELM_CHART_REGISTRY_PASSWORD: ${{ secrets.HELM_CHART_REGISTRY_PASSWORD }}
      HELM_EXTERNAL_SECRETS_STORE_NAME: ${{ secrets.HELM_EXTERNAL_SECRETS_STORE_NAME }}
      HELM_EXTERNAL_SECRETS_REMOTE_REF_KEY: ${{ secrets.HELM_EXTERNAL_SECRETS_REMOTE_REF_KEY }}
      HELM_CHART_VERSION: ${{ vars.HELM_CHART_VERSION }}
      HELM_RELEASE_NAME: ${{ vars.HELM_RELEASE_NAME }}
      HELM_RELEASE_NAMESPACE: ${{ vars.HELM_RELEASE_NAMESPACE }}
    needs: build-and-push
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Login to private registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.HELM_CHART_REGISTRY_ENDPOINT }}
          username: ${{ env.HELM_CHART_REGISTRY_USERNAME }}
          password: ${{ env.HELM_CHART_REGISTRY_PASSWORD}}
          logout: true

      - name: Configure Kubernetes config file
        run: |
          mkdir -p $HOME/.kube/
          echo "${{ env.K8S_KUBECONFIG }}" | base64 -d > $HOME/.kube/config

      - name: Release
        run: |
          helm upgrade \
            --install \
            --history-max 3 \
            --debug \
            --atomic \
            --wait \
            --values helm/values/qa.yaml \
            --set agent-api.image.repository=${{ env.PRIVATE_REGISTRY_ENDPOINT }}/${{ env.PRIVATE_REGISTRY_REPOSITORY }}
            --set agent-api.image.tag=${{ needs.build-and-push.outputs.short_sha }} \
            --set agent-api.externalSecret.secretStoreName=${{ env.HELM_EXTERNAL_SECRETS_STORE_NAME }} \
            --set agent-api.externalSecret.remoteRefKey=${{ env.HELM_EXTERNAL_SECRETS_REMOTE_REF_KEY }} \
            --set agent-ui.image.repository=${{ env.PRIVATE_REGISTRY_ENDPOINT }}/${{ env.PRIVATE_REGISTRY_REPOSITORY }} \
            --set agent-ui.image.tag=${{ needs.build-and-push.outputs.short_sha }} \
            -n ${{ env.HELM_RELEASE_NAMESPACE }} \
            ${{ env.HELM_RELEASE_NAME }} \
            ${{ env.HELM_CHART_REGISTRY_ENDPOINT }}/${{ env.HELM_CHART_REGISTRY_REPOSITORY }} \
            --version ${{ env.HELM_CHART_VERSION }}
